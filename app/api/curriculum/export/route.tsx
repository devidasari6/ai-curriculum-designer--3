import { type NextRequest, NextResponse } from "next/server"

interface ExportRequest {
  curriculum: any
  format: "markdown" | "pdf" | "docx" | "json"
  includeDetails?: boolean
}

export async function POST(request: NextRequest) {
  try {
    const { curriculum, format, includeDetails = true }: ExportRequest = await request.json()

    if (!curriculum || !format) {
      return NextResponse.json(
        {
          error: "Missing curriculum data or format",
        },
        { status: 400 },
      )
    }

    let content: string
    let mimeType: string
    let filename: string

    switch (format) {
      case "markdown":
        content = generateMarkdown(curriculum, includeDetails)
        mimeType = "text/markdown"
        filename = `${curriculum.title.replace(/\s+/g, "_")}_Curriculum.md`
        break

      case "json":
        content = JSON.stringify(curriculum, null, 2)
        mimeType = "application/json"
        filename = `${curriculum.title.replace(/\s+/g, "_")}_Curriculum.json`
        break

      case "pdf":
        content = generatePDFContent(curriculum, includeDetails)
        mimeType = "text/html" // For PDF generation, we'd return HTML that can be converted
        filename = `${curriculum.title.replace(/\s+/g, "_")}_Curriculum.html`
        break

      case "docx":
        content = generateDocxContent(curriculum, includeDetails)
        mimeType = "text/html"
        filename = `${curriculum.title.replace(/\s+/g, "_")}_Curriculum_Word.html`
        break

      default:
        return NextResponse.json({ error: "Unsupported format" }, { status: 400 })
    }

    return new NextResponse(content, {
      headers: {
        "Content-Type": mimeType,
        "Content-Disposition": `attachment; filename="${filename}"`,
      },
    })
  } catch (error) {
    console.error("Export error:", error)
    return NextResponse.json(
      {
        error: "Failed to export curriculum",
      },
      { status: 500 },
    )
  }
}

function generateMarkdown(curriculum: any, includeDetails: boolean): string {
  let markdown = `# ${curriculum.title}\n\n`

  markdown += `${curriculum.description}\n\n`

  markdown += `## Course Information\n\n`
  markdown += `- **Duration:** ${curriculum.duration}\n`
  markdown += `- **Skill Level:** ${curriculum.skillLevel}\n`
  markdown += `- **Total Weeks:** ${curriculum.totalWeeks}\n`
  markdown += `- **Generated:** ${new Date().toLocaleDateString()}\n\n`

  if (includeDetails) {
    markdown += `## Learning Objectives\n\n`
    curriculum.overallObjectives.forEach((obj: string) => {
      markdown += `- ${obj}\n`
    })

    markdown += `\n## Prerequisites\n\n`
    curriculum.prerequisites.forEach((prereq: string) => {
      markdown += `- ${prereq}\n`
    })

    markdown += `\n## Weekly Curriculum\n\n`
    curriculum.modules.forEach((module: any) => {
      markdown += `### Week ${module.week}: ${module.title}\n\n`

      markdown += `**Topics Covered:**\n`
      module.topics.forEach((topic: string) => {
        markdown += `- ${topic}\n`
      })

      markdown += `\n**Learning Objectives:**\n`
      module.learningObjectives.forEach((obj: string) => {
        markdown += `- ${obj}\n`
      })

      markdown += `\n**Resources:**\n`
      module.resources.forEach((resource: string) => {
        markdown += `- ${resource}\n`
      })

      markdown += `\n**Exercises:**\n`
      module.exercises.forEach((exercise: string) => {
        markdown += `- ${exercise}\n`
      })

      if (module.assessments.length > 0) {
        markdown += `\n**Assessments:**\n`
        module.assessments.forEach((assessment: string) => {
          markdown += `- ${assessment}\n`
        })
      }

      markdown += `\n---\n\n`
    })

    markdown += `## Final Assessment\n\n`
    markdown += `${curriculum.finalAssessment}\n\n`
  }

  markdown += `---\n\n`
  markdown += `*Generated by AI Curriculum Designer on ${new Date().toLocaleDateString()}*\n`

  return markdown
}

function generatePDFContent(curriculum: any, includeDetails: boolean): string {
  let html = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${curriculum.title}</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; margin: 40px; }
        h1 { color: #15803d; border-bottom: 2px solid #15803d; padding-bottom: 10px; }
        h2 { color: #84cc16; margin-top: 30px; }
        h3 { color: #374151; margin-top: 25px; }
        .info-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0; }
        .info-item { background: #f0fdf4; padding: 15px; border-radius: 5px; }
        .week-module { border: 1px solid #e5e7eb; margin: 20px 0; padding: 20px; border-radius: 8px; }
        .topics { display: flex; flex-wrap: wrap; gap: 5px; margin: 10px 0; }
        .topic-tag { background: #84cc16; color: white; padding: 3px 8px; border-radius: 3px; font-size: 12px; }
        ul { margin: 10px 0; padding-left: 20px; }
        .footer { margin-top: 40px; text-align: center; color: #6b7280; font-style: italic; }
    </style>
</head>
<body>
    <h1>${curriculum.title}</h1>
    <p>${curriculum.description}</p>
    
    <div class="info-grid">
        <div class="info-item">
            <strong>Duration:</strong> ${curriculum.duration}
        </div>
        <div class="info-item">
            <strong>Skill Level:</strong> ${curriculum.skillLevel}
        </div>
        <div class="info-item">
            <strong>Total Weeks:</strong> ${curriculum.totalWeeks}
        </div>
        <div class="info-item">
            <strong>Generated:</strong> ${new Date().toLocaleDateString()}
        </div>
    </div>
  `

  if (includeDetails) {
    html += `
    <h2>Learning Objectives</h2>
    <ul>
        ${curriculum.overallObjectives.map((obj: string) => `<li>${obj}</li>`).join("")}
    </ul>
    
    <h2>Prerequisites</h2>
    <ul>
        ${curriculum.prerequisites.map((prereq: string) => `<li>${prereq}</li>`).join("")}
    </ul>
    
    <h2>Weekly Curriculum</h2>
    `

    curriculum.modules.forEach((module: any) => {
      html += `
      <div class="week-module">
        <h3>Week ${module.week}: ${module.title}</h3>
        
        <h4>Topics Covered:</h4>
        <div class="topics">
            ${module.topics.map((topic: string) => `<span class="topic-tag">${topic}</span>`).join("")}
        </div>
        
        <h4>Learning Objectives:</h4>
        <ul>
            ${module.learningObjectives.map((obj: string) => `<li>${obj}</li>`).join("")}
        </ul>
        
        <h4>Resources:</h4>
        <ul>
            ${module.resources.map((resource: string) => `<li>${resource}</li>`).join("")}
        </ul>
        
        <h4>Exercises:</h4>
        <ul>
            ${module.exercises.map((exercise: string) => `<li>${exercise}</li>`).join("")}
        </ul>
        
        ${
          module.assessments.length > 0
            ? `
        <h4>Assessments:</h4>
        <ul>
            ${module.assessments.map((assessment: string) => `<li>${assessment}</li>`).join("")}
        </ul>
        `
            : ""
        }
      </div>
      `
    })

    html += `
    <h2>Final Assessment</h2>
    <p>${curriculum.finalAssessment}</p>
    `
  }

  html += `
    <div class="footer">
        Generated by AI Curriculum Designer on ${new Date().toLocaleDateString()}
    </div>
</body>
</html>
  `

  return html
}

function generateDocxContent(curriculum: any, includeDetails: boolean): string {
  // Similar to PDF but with Word-specific formatting
  return generatePDFContent(curriculum, includeDetails)
}
